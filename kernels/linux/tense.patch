diff --git a/include/linux/sched.h b/include/linux/sched.h
index c46f3a63b..f2aa3afc1 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -545,6 +545,11 @@ struct sched_entity {
 	u64				vruntime;
 	u64				prev_sum_exec_runtime;
 
+	u32				tense_faster;
+	u32				tense_slower;
+	u64				tense_offset_duration;
+	int				tense_slot;
+
 	u64				nr_migrations;
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
@@ -1460,6 +1465,9 @@ struct task_struct {
 	/* Used by LSM modules for access restriction: */
 	void				*security;
 #endif
+
+	struct tense_task		*tense_task;
+
 #ifdef CONFIG_BPF_SYSCALL
 	/* Used by BPF task local storage */
 	struct bpf_local_storage __rcu	*bpf_storage;
diff --git a/include/linux/sched/tense.h b/include/linux/sched/tense.h
new file mode 100644
index 000000000..0aec5eeac
--- /dev/null
+++ b/include/linux/sched/tense.h
@@ -0,0 +1,44 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _LINUX_SCHED_TENSE_H
+#define _LINUX_SCHED_TENSE_H
+
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/sched.h>
+#include <linux/list.h>
+#include <linux/hrtimer.h>
+
+/* struct tense_task - virtual-time data about a task
+ *
+ * @task_struct:	handle to the task_struct which owns this data
+ * @wakeup_time:	the virtual time when the process should wake up
+ * @faster:		how many times faster this process is than real time
+ * @slower:		how many times slower this process is than real time
+ * @list:		list_head for the list of all tense_tasks
+ */
+struct tense_task {
+	struct task_struct	*task_struct;
+
+	u64			wakeup_time;
+	struct hrtimer		wakeup_timer;
+
+	u32			faster;
+	u32			slower;
+
+	u64			next_io_duration;
+
+	struct list_head	list;
+};
+
+struct tense_operations {
+	u64  (*update_curr) (u64 delta_exec);
+	void (*after_task_tick) (struct task_struct *curr);
+};
+
+extern struct tense_operations *tense;
+
+void tense_nop(void);
+void tense_enqueue(struct task_struct *p);
+void tense_resched_curr(struct task_struct *p);
+
+#endif /* _LINUX_SCHED_TENSE_H */
diff --git a/init/init_task.c b/init/init_task.c
index 73cc8f035..03adf2a47 100644
--- a/init/init_task.c
+++ b/init/init_task.c
@@ -206,6 +206,7 @@ struct task_struct init_task
 #ifdef CONFIG_SECURITY
 	.security	= NULL,
 #endif
+	.tense_task	= NULL,
 #ifdef CONFIG_SECCOMP_FILTER
 	.seccomp	= { .filter_count = ATOMIC_INIT(0) },
 #endif
diff --git a/kernel/sched/Makefile b/kernel/sched/Makefile
index 976092b7b..186ea4e11 100644
--- a/kernel/sched/Makefile
+++ b/kernel/sched/Makefile
@@ -32,3 +32,4 @@ obj-y += core.o
 obj-y += fair.o
 obj-y += build_policy.o
 obj-y += build_utility.o
+obj-y += tense.o
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index da0bf6fe9..750ef3c31 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -36,6 +36,7 @@
 #include <linux/sched/nohz.h>
 #include <linux/sched/rseq_api.h>
 #include <linux/sched/rt.h>
+#include <linux/sched/tense.h>
 
 #include <linux/blkdev.h>
 #include <linux/context_tracking.h>
@@ -5422,6 +5423,8 @@ void scheduler_tick(void)
 
 	rq_unlock(rq, &rf);
 
+	tense->after_task_tick(curr);
+
 	if (sched_feat(LATENCY_WARN) && resched_latency)
 		resched_latency_warn(cpu, resched_latency);
 
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 77b2048a9..f5907ce5f 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -37,6 +37,7 @@
 #include <linux/sched/cputime.h>
 #include <linux/sched/isolation.h>
 #include <linux/sched/nohz.h>
+#include <linux/sched/tense.h>
 
 #include <linux/cpuidle.h>
 #include <linux/interrupt.h>
@@ -911,6 +912,12 @@ static void update_curr(struct cfs_rq *cfs_rq)
 	curr->sum_exec_runtime += delta_exec;
 	schedstat_add(cfs_rq->exec_clock, delta_exec);
 
+	// sum_exec_runtime above is not scaled to keep real thread clock
+	// vruntime below is scaled to force time-dilated fairness on cfs_rq
+	if (entity_is_task(curr)) {
+		delta_exec = tense->update_curr(delta_exec);
+	}
+
 	curr->vruntime += calc_delta_fair(delta_exec, curr);
 	update_min_vruntime(cfs_rq);
 
diff --git a/kernel/sched/tense.c b/kernel/sched/tense.c
new file mode 100644
index 000000000..1dd39d2f6
--- /dev/null
+++ b/kernel/sched/tense.c
@@ -0,0 +1,30 @@
+#include <linux/sched/tense.h>
+#include <linux/export.h>
+
+#include "sched.h"
+
+static u64 nop_update_curr(u64 delta_exec)
+{
+	return delta_exec;
+}
+
+static void nop_after_task_tick (struct task_struct *curr)
+{
+	return;
+}
+
+// Initialize tense to do nothing
+static struct tense_operations __tense = {
+	.update_curr = &nop_update_curr,
+	.after_task_tick = &nop_after_task_tick,
+};
+
+struct tense_operations *tense = &__tense;
+EXPORT_SYMBOL(tense);
+
+void tense_nop(void)
+{
+	tense->update_curr 	= &nop_update_curr;
+	tense->after_task_tick 	= &nop_after_task_tick;
+}
+EXPORT_SYMBOL(tense_nop);
